#!/usr/bin/env python3

import itertools as it
from optparse import OptionParser
import requests
import sys
from tabulate import tabulate
import time

# Setup optparse
parser = OptionParser()
parser.add_option('--helios')
parser.add_option('-r', '--regions')
parser.add_option('-p', '--patches')
parser.add_option('--min_play_rate', type='float', dest='mpr', default=0)
parser.add_option('--limit', type='int', default=None)
parser.add_option('--sort_by', type='int', dest='sortBy', default=1)

(options, args) = parser.parse_args()

# Endpoint Info
static_endpoint = options.helios + '/static/entry'
champions_endpoint = options.helios + '/champions'
champions_params = {
    'regions': options.regions,
    'patches': options.patches,
    'min_play_rate': options.mpr
}
champions_platp_params = {
    'regions': options.regions,
    'patches': options.patches,
    'min_play_rate': options.mpr,
    'tiers': 'PLATINUM,DIAMOND,MASTER,CHALLENGER'
}

# Request Helios for static and all champions data
start = time.time()
static = requests.get(static_endpoint).json()
print('Static request took {} seconds\n'.format(time.time() - start))

start = time.time()
print('Requesting {} for all tiers champions statistics with params {}...'.format(champions_endpoint, champions_params))
all_statistics = requests.get(champions_endpoint, params = champions_params).json()
print('All tiers Champion Statistics request took {} seconds\n'.format(time.time() - start))

start = time.time()
print('Requesting {} for plat+ champions statistics with params {}...'.format(champions_endpoint, champions_platp_params))
platp_statistics = requests.get(champions_endpoint, params = champions_platp_params).json()
print('Plat+ Champion Statistics request took {} seconds\n'.format(time.time() - start))

# Map of champion id to plays Statistic
all_plays = all_statistics['plays']
platp_plays = platp_statistics['plays']

# Print Total number of Plays
print("Total # of plays for all tiers: {}".format(sum((int(value["mean"]) for key, value in all_plays.items()))))
print("Total # of plays for plat+: {}\n".format(sum((int(value["mean"]) for key, value in platp_plays.items()))))

# Print Table
unsorted = [[static["champions"].get(key)["name"], value["mean"], platp_plays.get(key)["mean"]] for key, value in all_plays.items()]

limit = abs(options.limit) if options.limit else None
reverse = False if not options.limit else options.limit > 0
l = sorted(unsorted, key=lambda a: a[options.sortBy], reverse=reverse)
print(tabulate(l[:limit], headers=["champion name", "all tiers plays", "plat+ plays"]))
